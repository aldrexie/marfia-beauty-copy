{{ 'component-slideshow.css' | asset_url | stylesheet_tag }}
{{ 'component-slider.css' | asset_url | stylesheet_tag }}
{{ 'section-announcement-bar.css' | asset_url | stylesheet_tag }}

{%- liquid
  assign social_icons = true
  if settings.social_facebook_link == blank and settings.social_instagram_link == blank and settings.social_youtube_link == blank and settings.social_tiktok_link == blank and settings.social_twitter_link == blank and settings.social_pinterest_link == blank and settings.social_snapchat_link == blank and settings.social_tumblr_link == blank and settings.social_vimeo_link == blank
    assign social_icons = false
  endif
  if section.settings.enable_country_selector or section.settings.enable_language_selector
    assign language_country_selector = true
  endif
  if section.blocks.size > 0
    assign announcement_bar = true
  endif
-%}

{% if social_icons %}
  {{ 'component-list-social.css' | asset_url | stylesheet_tag }}
{% endif %}

<div
  class="utility-bar color-{{ section.settings.color_scheme }} gradient{% if section.settings.show_line_separator and section.blocks.size > 0 %} utility-bar--bottom-border{% elsif section.settings.show_line_separator and section.settings.show_social and social_icons%} utility-bar--bottom-border-social-only{% endif %}{% if section.settings.enable_country_selector or section.settings.enable_language_selector %} header-localization{% endif %}"
  {{ block.shopify_attributes }}
>
  <div class="page-width utility-bar__grid{% if announcement_bar and language_country_selector or section.settings.show_social and social_icons %} utility-bar__grid--3-col{% elsif language_country_selector or section.settings.show_social and social_icons %} utility-bar__grid--2-col{% endif %}">
    {%- if section.settings.show_social and social_icons -%}
      {%- render 'social-icons' -%}
    {%- endif -%}
    {%- if section.blocks.size > 0 -%}
      <div
        class="announcement-bar{% if section.settings.show_social %} announcement-bar--one-announcement{% endif %}"
        role="region"
        aria-label="{{ 'sections.header.announcement' | t }}"
        {{ block.shopify_attributes }}
        data-autoplay="{{ section.settings.auto_rotate }}"
        data-slide-interval="{{ section.settings.slide_interval }}"
        data-pause-duration="{{ section.settings.pause_duration }}"
      >
        <div class="announcement-messages">
          {%- for block in section.blocks -%}
            {%- if block.settings.text != blank -%}
              <div class="announcement-message" {{ block.shopify_attributes }}>
                {%- if block.settings.link != blank -%}
                  <a href="{{ block.settings.link }}" class="announcement-bar__link link link--text focus-inset animate-arrow">
                {%- endif -%}
                <p class="announcement-bar__message h5">
                  <span>{{ block.settings.text | escape }}</span>
                  {%- if block.settings.link != blank -%}
                    {% render 'icon-arrow' %}
                  {%- endif -%}
                </p>
                {%- if block.settings.link != blank -%}
                  </a>
                {%- endif -%}
              </div>
            {%- endif -%}
          {%- endfor -%}
        </div>
      </div>

      <script>
        class AnnouncementBar extends HTMLElement {
          constructor() {
            super();
            this.announcements = this.querySelectorAll('.announcement-message');
            if (this.announcements.length <= 1) return;
            
            this.autoPlay = this.dataset.autoplay === 'true';
            this.slideInterval = parseInt(this.dataset.slideInterval) * 1000 || 5000;
            this.pauseDuration = parseInt(this.dataset.pauseDuration) * 1000 || 2000;
            this.currentIndex = 0;
            
            this.setupAnnouncements();
            if (this.autoPlay) {
              this.play();
            }
          }

          setupAnnouncements() {
            this.announcements.forEach((announcement, index) => {
              const message = announcement.querySelector('.announcement-bar__message');
              if (index === 0) {
                message.classList.add('active');
              } else {
                message.style.opacity = '0';
              }
            });
          }

          async play() {
            while (true) {
              await this.wait(this.pauseDuration);
              await this.slideNext();
            }
          }

          async slideNext() {
            const currentAnnouncement = this.announcements[this.currentIndex].querySelector('.announcement-bar__message');
            this.currentIndex = (this.currentIndex + 1) % this.announcements.length;
            const nextAnnouncement = this.announcements[this.currentIndex].querySelector('.announcement-bar__message');

            currentAnnouncement.classList.remove('active');
            currentAnnouncement.classList.add('exit');

            await this.wait(300); // Short delay for exit animation

            nextAnnouncement.style.opacity = '';
            nextAnnouncement.classList.add('active');

            await this.wait(this.slideInterval);
            
            currentAnnouncement.classList.remove('exit');
            currentAnnouncement.style.opacity = '0';
          }

          wait(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
          }
        }

        customElements.define('announcement-bar', AnnouncementBar);
      </script>
    {%- endif -%}
    <div class="localization-wrapper">
      {%- if section.settings.enable_country_selector and localization.available_countries.size > 1 -%}
        <noscript class="small-hide medium-hide">
          {%- form 'localization', id: 'AnnouncementCountryMobileFormNoScript', class: 'localization-form' -%}
            <div class="localization-form__select">
              <h2 class="visually-hidden" id="AnnouncementCountryMobileLabelNoScript">
                {{ 'localization.country_label' | t }}
              </h2>
              <select
                class="localization-selector link"
                name="country_code"
                aria-labelledby="AnnouncementCountryMobileLabelNoScript"
              >
                {%- for country in localization.available_countries -%}
                  <option
                    value="{{ country.iso_code }}"
                    {%- if country.iso_code == localization.country.iso_code %}
                      selected
                    {% endif %}
                  >
                    {{ country.name }} ({{ country.currency.iso_code }}
                    {{ country.currency.symbol }})
                  </option>
                {%- endfor -%}
              </select>
              {% render 'icon-caret' %}
            </div>
            <button class="button button--tertiary">{{ 'localization.update_country' | t }}</button>
          {%- endform -%}
        </noscript>

        <localization-form class="small-hide medium-hide no-js-hidden">
          {%- form 'localization', id: 'AnnouncementCountryForm', class: 'localization-form' -%}
            <div>
              <h2 class="visually-hidden" id="AnnouncementCountryLabel">{{ 'localization.country_label' | t }}</h2>
              {%- render 'country-localization', localPosition: 'AnnouncementCountry' -%}
            </div>
          {%- endform -%}
        </localization-form>
      {% endif %}

      {%- if section.settings.enable_language_selector and localization.available_languages.size > 1 -%}
        <noscript class="small-hide medium-hide">
          {%- form 'localization', id: 'AnnouncementLanguageMobileFormNoScript', class: 'localization-form' -%}
            <div class="localization-form__select">
              <h2 class="visually-hidden" id="AnnouncementLanguageMobileLabelNoScript">
                {{ 'localization.language_label' | t }}
              </h2>
              <select
                class="localization-selector link"
                name="locale_code"
                aria-labelledby="AnnouncementLanguageMobileLabelNoScript"
              >
                {%- for language in localization.available_languages -%}
                  <option
                    value="{{ language.iso_code }}"
                    lang="{{ language.iso_code }}"
                    {%- if language.iso_code == localization.language.iso_code %}
                      selected
                    {% endif %}
                  >
                    {{ language.endonym_name | capitalize }}
                  </option>
                {%- endfor -%}
              </select>
              {% render 'icon-caret' %}
            </div>
            <button class="button button--tertiary">{{ 'localization.update_language' | t }}</button>
          {%- endform -%}
        </noscript>

        <localization-form class="small-hide medium-hide no-js-hidden">
          {%- form 'localization', id: 'AnnouncementLanguageForm', class: 'localization-form' -%}
            <div>
              <h2 class="visually-hidden" id="AnnouncementLanguageLabel">{{ 'localization.language_label' | t }}</h2>
              {%- render 'language-localization', localPosition: 'AnnouncementLanguage' -%}
            </div>
          {%- endform -%}
        </localization-form>
      {%- endif -%}
    </div>
  </div>
</div>

{% schema %}
{
  "name": "t:sections.announcement-bar.name",
  "max_blocks": 12,
  "class": "announcement-bar-section",
  "enabled_on": {
    "groups": ["header"]
  },
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "accent-1"
    },
    {
      "type": "checkbox",
      "id": "show_line_separator",
      "default": true,
      "label": "t:sections.header.settings.show_line_separator.label"
    },
    {
      "type": "header",
      "content": "Animation Settings"
    },
    {
      "type": "range",
      "id": "slide_interval",
      "min": 3,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Slide Duration",
      "default": 5
    },
    {
      "type": "range",
      "id": "pause_duration",
      "min": 1,
      "max": 5,
      "step": 1,
      "unit": "s",
      "label": "Pause Duration",
      "default": 2
    },
    {
      "type": "checkbox",
      "id": "auto_rotate",
      "label": "Auto-rotate announcements",
      "default": true
    },
    {
      "type": "header",
      "content": "t:sections.announcement-bar.settings.header__1.content",
      "info": "t:sections.announcement-bar.settings.header__1.info"
    },
    {
      "type": "checkbox",
      "id": "show_social",
      "default": false,
      "label": "t:sections.announcement-bar.settings.show_social.label"
    },
    {
      "type": "header",
      "content": "t:sections.announcement-bar.settings.header__2.content"
    },
    {
      "type": "checkbox",
      "id": "enable_country_selector",
      "default": false,
      "label": "t:sections.announcement-bar.settings.enable_country_selector.label"
    },
    {
      "type": "header",
      "content": "t:sections.announcement-bar.settings.header__4.content",
      "info": "t:sections.announcement-bar.settings.header__4.info"
    },
    {
      "type": "checkbox",
      "id": "enable_language_selector",
      "default": false,
      "label": "t:sections.announcement-bar.settings.enable_language_selector.label"
    }
  ],
  "blocks": [
    {
      "type": "announcement",
      "name": "t:sections.announcement-bar.blocks.announcement.name",
      "settings": [
        {
          "type": "text",
          "id": "text",
          "default": "Welcome to our store",
          "label": "t:sections.announcement-bar.blocks.announcement.settings.text.label"
        },
        {
          "type": "url",
          "id": "link",
          "label": "t:sections.announcement-bar.blocks.announcement.settings.link.label"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "t:sections.announcement-bar.presets.name",
      "blocks": [
        {
          "type": "announcement"
        }
      ]
    }
  ]
}
{% endschema %}
